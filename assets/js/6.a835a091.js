(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{363:function(e,r,a){e.exports=a.p+"assets/img/2.workflow.drawio.5cc2d5fb.svg"},377:function(e,r,a){"use strict";a.r(r);var t=a(45),o=Object(t.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"development-and-release-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#development-and-release-workflow"}},[e._v("#")]),e._v(" Development and Release Workflow")]),e._v(" "),t("h2",{attrs:{id:"environments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#environments"}},[e._v("#")]),e._v(" Environments")]),e._v(" "),t("h3",{attrs:{id:"live"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#live"}},[e._v("#")]),e._v(" Live")]),e._v(" "),t("ul",[t("li",[e._v("Production environment")]),e._v(" "),t("li",[e._v("Deployed from "),t("code",[e._v("release/live")]),e._v(" branch with tags")])]),e._v(" "),t("h3",{attrs:{id:"pre-release"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pre-release"}},[e._v("#")]),e._v(" Pre-release")]),e._v(" "),t("ul",[t("li",[e._v("Regression test environment")]),e._v(" "),t("li",[e._v("Deployed from "),t("code",[e._v("prerelease")]),e._v(" branch")])]),e._v(" "),t("h3",{attrs:{id:"stage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stage"}},[e._v("#")]),e._v(" Stage")]),e._v(" "),t("ul",[t("li",[e._v("Testing environment")]),e._v(" "),t("li",[e._v("Configuration same as live environment")]),e._v(" "),t("li",[e._v("Connect to Stage Global Login service")]),e._v(" "),t("li",[e._v("Deployed from "),t("code",[e._v("trunk")]),e._v(" branch")])]),e._v(" "),t("h3",{attrs:{id:"sandbox"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sandbox"}},[e._v("#")]),e._v(" Sandbox")]),e._v(" "),t("ul",[t("li",[e._v("Playground for developers")]),e._v(" "),t("li",[e._v("Deployed from "),t("code",[e._v("develop")]),e._v(" branch")]),e._v(" "),t("li",[e._v("Connect to Stage Global Login service")]),e._v(" "),t("li",[e._v("Global login for CORE disable (so that we donâ€™t need to do MFA)")])]),e._v(" "),t("h2",{attrs:{id:"branches"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[e._v("#")]),e._v(" Branches")]),e._v(" "),t("h3",{attrs:{id:"release-live-branch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-live-branch"}},[e._v("#")]),e._v(" release/live branch")]),e._v(" "),t("ul",[t("li",[e._v("Used to track the latest released code")])]),e._v(" "),t("h3",{attrs:{id:"prerelease-branch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerelease-branch"}},[e._v("#")]),e._v(" prerelease branch")]),e._v(" "),t("ul",[t("li",[e._v("Used for regression test")]),e._v(" "),t("li",[e._v("Only merge new code to this branch right before a regression test")])]),e._v(" "),t("h3",{attrs:{id:"golive-branch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#golive-branch"}},[e._v("#")]),e._v(" golive branch")]),e._v(" "),t("ul",[t("li",[e._v("Temporary branch, used for each hotfix/normal release")]),e._v(" "),t("li",[e._v("A few golive branches may exist at the same time. e.g. "),t("code",[e._v("golive/2.2.1.4")]),e._v(" "),t("code",[e._v("golive/2.2.1.5")]),e._v(" "),t("code",[e._v("golive/2.2.2")])]),e._v(" "),t("li",[e._v("Deleted after release")]),e._v(" "),t("li",[e._v("Naming convention "),t("code",[e._v("golive/{version}")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("golive/1.3.5")])])])])]),e._v(" "),t("h3",{attrs:{id:"trunk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trunk"}},[e._v("#")]),e._v(" trunk")]),e._v(" "),t("ul",[t("li",[e._v("Used for normal testing")]),e._v(" "),t("li",[e._v("Pull Request require checks(SonarClould, code review)")])]),e._v(" "),t("h3",{attrs:{id:"develop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#develop"}},[e._v("#")]),e._v(" develop")]),e._v(" "),t("ul",[t("li",[e._v("Playground for developer")]),e._v(" "),t("li",[e._v("Do not require pull request checks. Developer can push code to "),t("code",[e._v("develop")]),e._v(" branch whenever needed, including debug codes")])]),e._v(" "),t("h3",{attrs:{id:"feature-bugfix-hotfix-branch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#feature-bugfix-hotfix-branch"}},[e._v("#")]),e._v(" feature/bugfix/hotfix branch")]),e._v(" "),t("ul",[t("li",[e._v("Temporary branch, used for development")]),e._v(" "),t("li",[e._v("Auto deleted after pull request get merged")]),e._v(" "),t("li",[e._v("Naming convention "),t("code",[e._v("{prefix}/{JIRA story code}/{JIRA story title}")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("feature/CORE-1234/Example-feature-core-story")])])])])]),e._v(" "),t("h2",{attrs:{id:"development-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#development-workflow"}},[e._v("#")]),e._v(" Development workflow")]),e._v(" "),t("ul",[t("li",[e._v("Feature development\n"),t("ul",[t("li",[e._v("Branch out from "),t("code",[e._v("golive/*")]),e._v(" branch")]),e._v(" "),t("li",[e._v("Once development finished, merge to "),t("code",[e._v("trunk")]),e._v(" branch for testing")]),e._v(" "),t("li",[e._v("Once testing passed, merge to "),t("code",[e._v("golive/*")]),e._v(" branch")])])]),e._v(" "),t("li",[e._v("Bugfix development\n"),t("ul",[t("li",[e._v("Branch out from "),t("code",[e._v("release/live")]),e._v(" branch (in case we want to hotfix release it)")]),e._v(" "),t("li",[e._v("Once development finished, merge to "),t("code",[e._v("trunk")]),e._v(" branch for testing")]),e._v(" "),t("li",[e._v("Once testing passed, merge to "),t("code",[e._v("golive/*")]),e._v(" branch")])])]),e._v(" "),t("li",[e._v("Hotfix development\n"),t("ul",[t("li",[e._v("Create "),t("code",[e._v("golive/*")]),e._v(" branch for this hotfix (branch out from "),t("code",[e._v("release/live")]),e._v(")")]),e._v(" "),t("li",[e._v("Create hotfix branch (branch out from the "),t("code",[e._v("golive/*")]),e._v(" branch for this hotfix)")]),e._v(" "),t("li",[e._v("Once development finished, merge to "),t("code",[e._v("trunk")]),e._v(" branch for testing")]),e._v(" "),t("li",[e._v("Once testing passed, merge to the "),t("code",[e._v("golive/*")]),e._v(" branch for this hotfix")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:a(363),alt:"Workflow"}})]),e._v(" "),t("h2",{attrs:{id:"release-workflow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-workflow"}},[e._v("#")]),e._v(" Release workflow")]),e._v(" "),t("p",[e._v("Once all tickets in one release have passed tests and marked as done. It's the time to start the release workflow")]),e._v(" "),t("ol",[t("li",[e._v("Define Regression and PVT scope - Risk Assess areas")]),e._v(" "),t("li",[e._v("Merge "),t("code",[e._v("golive/*")]),e._v(" branch to "),t("code",[e._v("prerelease")]),e._v(" branch so that it will deploy to the "),t("code",[e._v("pre-release")]),e._v(" environment")]),e._v(" "),t("li",[e._v("QA start regression test on "),t("code",[e._v("pre-release")]),e._v(" environment\n"),t("ol",[t("li",[e._v("Hotfix on "),t("code",[e._v("golive/*")]),e._v(" branch if defects found")])])]),e._v(" "),t("li",[e._v("Merge "),t("code",[e._v("prerelease")]),e._v(" to "),t("code",[e._v("release/live")]),e._v(" and create a new tag on "),t("code",[e._v("release/live")]),e._v(" branch once regression test finished")]),e._v(" "),t("li",[e._v("Compare the new tag with the live tag to make sure the code changes in the new tag are correct to be released")]),e._v(" "),t("li",[e._v("Announce the scheduled release time in Slack release channel")]),e._v(" "),t("li",[e._v("Trigger the release")]),e._v(" "),t("li",[e._v("QA do PVT on live")]),e._v(" "),t("li",[e._v("Announce the release in Slack to broader team")])]),e._v(" "),t("h3",{attrs:{id:"release-versioning"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-versioning"}},[e._v("#")]),e._v(" Release versioning")]),e._v(" "),t("ul",[t("li",[e._v("We will use the same version across all repos for feature version change e.g. 2.2.1 to 2.2.2")]),e._v(" "),t("li",[e._v("For each feature and hotfix release (e.g. 2.2.1.4 to 2.2.1.5), we will always release "),t("code",[e._v("core")]),e._v(", "),t("code",[e._v("graphql")]),e._v(", "),t("code",[e._v("app")]),e._v(" these 3 repos, even if there are no code changes in one of the repos")]),e._v(" "),t("li",[e._v("When we do a feature release (e.g. 2.2.1 to 2.2.2), releaes all repos (including chat-api, login-api, login-app, statistics, template-lib-api, messaging-service, webhooks, etc.) even if there are no code changes in any of the repos")])]),e._v(" "),t("p",[e._v("Example 1:")]),e._v(" "),t("ul",[t("li",[e._v("We are doing a feature release 2.2.1 to 2.2.2")]),e._v(" "),t("li",[e._v("We will create tag version 2.2.2 to all repos")]),e._v(" "),t("li",[e._v("We will release all repos")]),e._v(" "),t("li",[e._v("Every repo will be at 2.2.2")])]),e._v(" "),t("p",[e._v("Example 2:")]),e._v(" "),t("ul",[t("li",[e._v("We are doing a hotfix release 2.2.1.4 to 2.2.1.5")]),e._v(" "),t("li",[e._v("We will create tag version 2.2.1.5 only to "),t("code",[e._v("core")]),e._v(", "),t("code",[e._v("graphql")]),e._v(", "),t("code",[e._v("app")]),e._v(", or if there are code changes from any of the other repo, also create tage verion 2.2.1.5 to it")]),e._v(" "),t("li",[e._v("We will only release "),t("code",[e._v("core")]),e._v(", "),t("code",[e._v("graphql")]),e._v(", "),t("code",[e._v("app")]),e._v(" these 3 repos if there are no code changes from other repos")]),e._v(" "),t("li",[t("code",[e._v("core")]),e._v(", "),t("code",[e._v("graphql")]),e._v(", "),t("code",[e._v("app")]),e._v(" will be at 2.2.1.5")]),e._v(" "),t("li",[e._v("Other repos stays at the feature version 2.2.1")])])])}),[],!1,null,null,null);r.default=o.exports}}]);